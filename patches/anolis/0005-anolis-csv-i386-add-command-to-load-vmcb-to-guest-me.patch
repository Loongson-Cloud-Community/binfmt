From 0c10f36276fef9f5983dc4b503aff6abf6af5961 Mon Sep 17 00:00:00 2001
From: jiangxin <jiangxin@hygon.cn>
Date: Wed, 25 Aug 2021 12:25:05 +0800
Subject: [PATCH 5/9] anolis: csv/i386: add command to load vmcb to guest
 memory

The KVM_CSV_LAUNCH_ENCRYPT_VMCB command is used to load and encrypt
the initial VMCB data to secure memory in an isolated region
that guest owns.

Signed-off-by: Xin Jiang <jiangxin@hygon.cn>
Change-Id: I9dacc9e6b1b73c168b28a88b96c298bba4baa1ee
---
 linux-headers/linux/kvm.h     |  1 +
 target/i386/csv-sysemu-stub.c |  5 +++++
 target/i386/csv.c             | 21 +++++++++++++++++++++
 target/i386/csv.h             |  1 +
 target/i386/sev.c             |  7 +++++--
 5 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/linux-headers/linux/kvm.h b/linux-headers/linux/kvm.h
index 456aed121f..e5b45c384d 100644
--- a/linux-headers/linux/kvm.h
+++ b/linux-headers/linux/kvm.h
@@ -1989,6 +1989,7 @@ enum csv_cmd_id {
 
 	KVM_CSV_INIT = KVM_CSV_NR_MIN,
 	KVM_CSV_LAUNCH_ENCRYPT_DATA,
+	KVM_CSV_LAUNCH_ENCRYPT_VMCB,
 };
 
 struct kvm_csv_launch_encrypt_data {
diff --git a/target/i386/csv-sysemu-stub.c b/target/i386/csv-sysemu-stub.c
index 236a6909d2..a5ce986e3c 100644
--- a/target/i386/csv-sysemu-stub.c
+++ b/target/i386/csv-sysemu-stub.c
@@ -24,3 +24,8 @@ int csv_load_data(uint64_t gpa, uint8_t *ptr, uint64_t len, Error **errp)
 {
     g_assert_not_reached();
 }
+
+int csv_launch_encrypt_vmcb(void)
+{
+    g_assert_not_reached();
+}
diff --git a/target/i386/csv.c b/target/i386/csv.c
index 3b3dff5174..d166d3775e 100644
--- a/target/i386/csv.c
+++ b/target/i386/csv.c
@@ -162,3 +162,24 @@ csv_load_data(uint64_t gpa, uint8_t *ptr, uint64_t len, Error **errp)
 
     return ret;
 }
+
+int
+csv_launch_encrypt_vmcb(void)
+{
+    int ret, fw_error;
+
+    if (!csv_enabled()) {
+        error_report("%s: CSV is not enabled",__func__);
+        return -1;
+    }
+
+    ret = csv_ioctl(KVM_CSV_LAUNCH_ENCRYPT_VMCB, NULL, &fw_error);
+    if (ret) {
+        error_report("%s: CSV LAUNCH_ENCRYPT_VMCB ret=%d fw_error=%d '%s'",
+                     __func__, ret, fw_error, fw_error_to_str(fw_error));
+        goto err;
+    }
+
+err:
+    return ret;
+}
diff --git a/target/i386/csv.h b/target/i386/csv.h
index 6f7b112d96..640eafd45b 100644
--- a/target/i386/csv.h
+++ b/target/i386/csv.h
@@ -34,6 +34,7 @@ typedef struct CsvGuestState CsvGuestState;
 
 extern struct CsvGuestState csv_guest;
 extern int csv_init(uint32_t policy, int fd, void *state, struct sev_ops *ops);
+extern int  csv_launch_encrypt_vmcb(void);
 
 int csv_load_data(uint64_t gpa, uint8_t *ptr, uint64_t len, Error **errp);
 
diff --git a/target/i386/sev.c b/target/i386/sev.c
index 20507da004..efbe48fc30 100644
--- a/target/i386/sev.c
+++ b/target/i386/sev.c
@@ -810,8 +810,11 @@ sev_launch_get_measure(Notifier *notifier, void *unused)
     }
 
     if (sev_es_enabled()) {
-        /* measure all the VM save areas before getting launch_measure */
-        ret = sev_launch_update_vmsa(sev);
+        if (csv_enabled())
+            ret = csv_launch_encrypt_vmcb();
+        else
+            /* measure all the VM save areas before getting launch_measure */
+            ret = sev_launch_update_vmsa(sev);
         if (ret) {
             exit(1);
         }
-- 
2.17.1

