ARG GO_VERSION=1.21
ARG ALPINE_VERSION=3.18
ARG XX_VERSION=1.3.0

ARG QEMU_VERSION=v8.2.0-rc1
ARG QEMU_REPO=https://github.com/qemu/qemu

# xx is a helper for cross-compilation
FROM lcr.loongnix.cn/tonistiigi/xx:latest AS xx

FROM lcr.loongnix.cn/library/debian:sid AS src
RUN apt update && apt install -y git patch

WORKDIR /src
ARG QEMU_VERSION
ARG QEMU_REPO
COPY patches patches
RUN 	apt update  \
	&& apt install -y git clang python3 \
	llvm make ninja-build \
	pkg-config pkgconf libglib2.0-dev \
	gcc libc6-dev perl \
	bash lld-16 binutils \
	linux-headers-6.5.0-3-common zlib1g-dev wget \
	&& ln -s /usr/bin/lld-16 /usr/bin/lld
COPY --from=xx / /

ARG TARGETPLATFORM
# 当前debian系统不稳定，尝试使用openeuler来编译qemu
# 最新qemu版本为8.2.0-rc1
# 下载编译好的qemu进行安装
# https://github.com/Loongson-Cloud-Community/binfmt/releases
WORKDIR /qemu
#RUN https_proxy=http://10.130.0.20:7890 wget -O qemu-static.tar.gz https://github.com/Loongson-Cloud-Community/qemu-user-static/releases/download/abi2.0/qemu-static-8.2.0-rc2.tar.gz \
RUN https_proxy=http://10.130.0.20:7890 wget -O qemu-static.tar.gz https://github.com/Loongson-Cloud-Community/qemu-user-static/releases/download/abi2.0/qemu-static-7.2.6.tar.gz \
	&& tar zxvf qemu-static.tar.gz && rm qemu-static.tar.gz \
	&& cd qemu-static && cp ./* /usr/bin	
RUN rm -rf /usr/bin/qemu-loongarch64

ARG BINARY_PREFIX
RUN cd /usr/bin; [ -z "$BINARY_PREFIX" ] || for f in $(ls qemu-*); do ln -s $f $BINARY_PREFIX$f; done

FROM lcr.loongnix.cn/library/golang:1.21-alpine AS binfmt
COPY --from=xx / /
ENV CGO_ENABLED=0
ARG TARGETPLATFORM
ARG QEMU_VERSION
WORKDIR /src
RUN apk add --no-cache git
RUN --mount=target=. \
  TARGETPLATFORM=$TARGETPLATFORM go build \
    -ldflags "-X main.revision=$(git rev-parse --short HEAD) -X main.qemuVersion=${QEMU_VERSION}" \
    -o /go/bin/binfmt ./cmd/binfmt 

FROM src AS build-archive
COPY --from=binfmt /go/bin/binfmt /usr/bin/binfmt
RUN cd /usr/bin && mkdir -p /archive && \
  tar czvfh "/archive/${BINARY_PREFIX}qemu_${QEMU_VERSION}_$(echo $TARGETPLATFORM | sed 's/\//-/g').tar.gz" ${BINARY_PREFIX}qemu* && \
  tar czvfh "/archive/binfmt_$(echo $TARGETPLATFORM | sed 's/\//-/g').tar.gz" binfmt

# binaries contains only the compiled QEMU binaries
FROM scratch AS binaries
# BINARY_PREFIX sets prefix string to all QEMU binaries
ARG BINARY_PREFIX
#COPY --from=build usr/bin/${BINARY_PREFIX}qemu-* /
COPY --from=src usr/bin/${BINARY_PREFIX}qemu-* /
# archive returns the tarball of binaries
FROM scratch AS archive
COPY --from=build-archive /archive/* /

FROM lcr.loongnix.cn/tonistiigi/bats-assert:latest AS assert

FROM  lcr.loongnix.cn/library/alpine:v3.18-base AS alpine-crossarch

RUN apk add --no-cache bash

# Runs on the build platform without emulation, but we need to get hold of the cross arch busybox binary
COPY busybox.static /bin/
COPY crossarch.sh .
RUN chmod +x crossarch.sh && bash crossarch.sh

# buildkit-test runs test suite for buildkit embedded QEMU
FROM lcr.loongnix.cn/library/golang:1.21-alpine AS buildkit-test
RUN apk add --no-cache bash bats
WORKDIR /work
COPY --from=assert . .
COPY test .
COPY --from=binaries / /usr/bin
COPY --from=alpine-crossarch /crossarch /crossarch/
RUN ./run.sh

#FROM lcr.loongnix.cn/library/alpine:v3.18-base AS image
#COPY --from=binaries / /usr/bin/
#CMD [ "/bin/sh" ]
# image builds binfmt installation image 
FROM scratch AS image
COPY --from=binaries / /usr/bin/
COPY --from=binfmt /go/bin/binfmt /usr/bin/binfmt
# QEMU_PRESERVE_ARGV0 defines if argv0 is used to set the binary name
ARG QEMU_PRESERVE_ARGV0
ENV QEMU_PRESERVE_ARGV0=${QEMU_PRESERVE_ARGV0}
#CMD [ "/bin/bash" ]
ENTRYPOINT [ "/usr/bin/binfmt" ]
VOLUME /tmp

